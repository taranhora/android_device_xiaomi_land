type fpc_socket, file_type;
type gx_fpd_device, dev_type;

r_dir_file(hal_fingerprint_default, firmware_file)
add_service(hal_fingerprint_default, fingerprintd_custom_service);

allow hal_fingerprint_default fpc_sysfs:file rw_file_perms;
allow hal_fingerprint_default fpc_sysfs:dir r_dir_perms;
allow hal_fingerprint_default uhid_device:chr_file { ioctl open read write };
allow hal_fingerprint_default tee_device:chr_file rw_file_perms;
allow hal_fingerprint_default fpc_data_file:dir { open read write remove_name add_name };
allow hal_fingerprint_default fpc_data_file:sock_file { open read write create unlink };
allow hal_fingerprint_default property_socket:sock_file { open read write create unlink };
allow hal_fingerprint_default fingerprint_service:service_manager find;
allow hal_fingerprint_default gx_fpd_service:service_manager find;
allow hal_fingerprint_default init:unix_stream_socket connectto;

# TEMP
allow hal_fingerprint_default sysfs:file rw_file_perms;

# Ignore all logging requests
dontaudit hal_fingerprint_default storage_file:dir search;

allow hal_fingerprint_default servicemanager:binder { call transfer };
allow hal_fingerprint_default hwservicemanager:binder { call transfer };

allow hal_fingerprint_default keystore_service:service_manager { find };
allow hal_fingerprint_default keystore:binder { call };
allow hal_fingerprint_default keystore:keystore_key { add_auth };

set_prop(hal_fingerprint_default, system_prop)
binder_call(hal_fingerprint_default, gx_fpd)
binder_use(hal_fingerprint_default)
